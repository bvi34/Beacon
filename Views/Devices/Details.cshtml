@model Beacon.Models.Device

@{
    ViewData["Title"] = "Device Details";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8">
            <h2><i class="fas fa-server"></i> Device Details</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-action="Index">Devices</a></li>
                    <li class="breadcrumb-item active">@Model.Hostname</li>
                </ol>
            </nav>
        </div>
        <div class="col-md-4 text-end">
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to List
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <!-- Device Information Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-info-circle"></i> Device Information
                    </h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Hostname:</dt>
                        <dd class="col-sm-8"><strong>@Model.Hostname</strong></dd>

                        <dt class="col-sm-4">IP Address:</dt>
                        <dd class="col-sm-8"><code>@Model.IpAddress</code></dd>

                        <dt class="col-sm-4">Status:</dt>
                        <dd class="col-sm-8">
                            @switch (Model.Status)
                            {
                                case DeviceStatus.Online:
                                    <span class="badge bg-success fs-6">
                                        <i class="fas fa-circle"></i> Online
                                    </span>
                                    break;
                                case DeviceStatus.Offline:
                                    <span class="badge bg-danger fs-6">
                                        <i class="fas fa-circle"></i> Offline
                                    </span>
                                    break;
                                case DeviceStatus.Warning:
                                    <span class="badge bg-warning fs-6">
                                        <i class="fas fa-exclamation-triangle"></i> Warning
                                    </span>
                                    break;
                                case DeviceStatus.Critical:
                                    <span class="badge bg-danger fs-6">
                                        <i class="fas fa-exclamation-circle"></i> Critical
                                    </span>
                                    break;
                                default:
                                    <span class="badge bg-secondary fs-6">
                                        <i class="fas fa-question-circle"></i> Unknown
                                    </span>
                                    break;
                            }
                        </dd>

                        <dt class="col-sm-4">Last Seen:</dt>
                        <dd class="col-sm-8">
                            @Model.LastSeen.ToString("yyyy-MM-dd HH:mm:ss") UTC
                            <br><small class="text-muted">@GetTimeSinceLastSeen(Model.LastSeen)</small>
                        </dd>

                        <dt class="col-sm-4">First Discovered:</dt>
                        <dd class="col-sm-8">@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss") UTC</dd>

                        <dt class="col-sm-4">Last Updated:</dt>
                        <dd class="col-sm-8">@Model.UpdatedAt.ToString("yyyy-MM-dd HH:mm:ss") UTC</dd>
                    </dl>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <!-- Quick Actions Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-tools"></i> Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary" onclick="pingDevice('@Model.IpAddress')">
                            <i class="fas fa-satellite-dish"></i> Ping Device
                        </button>
                        <button class="btn btn-outline-info" onclick="scanPorts('@Model.IpAddress')">
                            <i class="fas fa-search"></i> Scan Ports
                        </button>
                        <button class="btn btn-outline-success" onclick="checkCertificates('@Model.IpAddress')">
                            <i class="fas fa-certificate"></i> Check Certificates
                        </button>
                        <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-outline-danger">
                            <i class="fas fa-trash"></i> Delete Device
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Monitored Ports Card -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-plug"></i> Monitored Ports
                        <span class="badge bg-primary">@Model.MonitoredPorts.Count</span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.MonitoredPorts.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Port</th>
                                        <th>Protocol</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var port in Model.MonitoredPorts)
                                    {
                                        <tr>
                                            <td><code>@port.Port</code></td>
                                            <td>@port.Protocol</td>
                                            <td>
                                                <span class="badge bg-info">@port.Status</span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-3">
                            <i class="fas fa-plug fa-2x mb-2"></i>
                            <p>No monitored ports configured</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Certificates Card -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-certificate"></i> SSL Certificates
                        <span class="badge bg-primary">@Model.Certificates.Count</span>
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.Certificates.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Subject</th>
                                        <th>Expires</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var cert in Model.Certificates)
                                    {
                                        <tr>
                                            <td>
                                                <small>@cert.Subject</small>
                                            </td>
                                            <td>
                                                <small>@cert.ExpiryDate.ToString("yyyy-MM-dd")</small>
                                            </td>
                                            <td>
                                                @if (cert.ExpiryDate < DateTime.UtcNow)
                                                {
                                                    <span class="badge bg-danger">Expired</span>
                                                }
                                                else if (cert.ExpiryDate < DateTime.UtcNow.AddDays(30))
                                                {
                                                    <span class="badge bg-warning">Expiring Soon</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">Valid</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-3">
                            <i class="fas fa-certificate fa-2x mb-2"></i>
                            <p>No SSL certificates found</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetTimeSinceLastSeen(DateTime lastSeen)
    {
        var timeSpan = DateTime.UtcNow - lastSeen;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        else if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        else if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        else
            return $"{(int)timeSpan.TotalDays} days ago";
    }
}

@section Scripts {
    <script>
        function pingDevice(ipAddress) {
            // This would call your API to ping the device
            alert(`Pinging ${ipAddress}...`);
            // TODO: Implement actual ping functionality
        }

        function scanPorts(ipAddress) {
            // This would call your API to scan ports
            alert(`Scanning ports for ${ipAddress}...`);
            // TODO: Implement actual port scanning
        }

        function checkCertificates(ipAddress) {
            // This would call your API to check certificates
            alert(`Checking certificates for ${ipAddress}...`);
            // TODO: Implement actual certificate checking
        }
    </script>
}