@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beacon Monitoring System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        :root {
            --primary-purple: #8B5CF6;
            --primary-gray: #6B7280;
            --bg-light: #F8FAFC;
            --bg-dark: #1E293B;
            --card-light: #FFFFFF;
            --card-dark: #334155;
            --text-light: #1F2937;
            --text-dark: #F1F5F9;
            --border-light: #E5E7EB;
            --border-dark: #475569;
            --online-green: #10B981;
            --offline-red: #EF4444;
            --warning-yellow: #F59E0B;
            --beacon-glow: radial-gradient(circle, rgba(139,92,246,0.3) 0%, rgba(139,92,246,0.1) 50%, transparent 100%);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg-light);
            color: var(--text-light);
            transition: all 0.3s ease;
        }

            body.dark {
                background: var(--bg-dark);
                color: var(--text-dark);
            }

        .header {
            background: var(--card-light);
            border-bottom: 1px solid var(--border-light);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        body.dark .header {
            background: var(--card-dark);
            border-bottom: 1px solid var(--border-dark);
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .beacon-logo {
            width: 40px;
            height: 40px;
            background: var(--beacon-glow);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.05);
                opacity: 0.8;
            }
        }

        .beacon-icon {
            width: 24px;
            height: 24px;
            background: linear-gradient(45deg, var(--primary-purple), var(--primary-gray));
            border-radius: 50%;
        }

        h1 {
            font-size: 1.5rem;
            font-weight: 600;
            background: linear-gradient(45deg, var(--primary-purple), var(--primary-gray));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: var(--primary-purple);
            color: white;
        }

            .btn-primary:hover {
                background: #7C3AED;
                transform: translateY(-1px);
            }

        .btn-secondary {
            background: var(--primary-gray);
            color: white;
        }

            .btn-secondary:hover {
                background: #4B5563;
                transform: translateY(-1px);
            }

        .theme-toggle {
            background: var(--card-light);
            border: 2px solid var(--border-light);
            color: var(--text-light);
            padding: 0.5rem;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        body.dark .theme-toggle {
            background: var(--card-dark);
            border-color: var(--border-dark);
            color: var(--text-dark);
        }

        .theme-toggle:hover {
            transform: scale(1.1);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .metric-card {
            background: var(--card-light);
            border: 1px solid var(--border-light);
            border-radius: 1rem;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        body.dark .metric-card {
            background: var(--card-dark);
            border-color: var(--border-dark);
        }

        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .metric-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--primary-purple);
        }

        .metric-card.online::before {
            background: var(--online-green);
        }

        .metric-card.offline::before {
            background: var(--offline-red);
        }

        .metric-card.warning::before {
            background: var(--warning-yellow);
        }

        .metric-number {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .metric-label {
            font-size: 0.9rem;
            color: var(--primary-gray);
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .chart-section {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .chart-card {
            background: var(--card-light);
            border: 1px solid var(--border-light);
            border-radius: 1rem;
            padding: 1.5rem;
        }

        body.dark .chart-card {
            background: var(--card-dark);
            border-color: var(--border-dark);
        }

        .chart-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--primary-purple);
        }

        .device-list {
            background: var(--card-light);
            border: 1px solid var(--border-light);
            border-radius: 1rem;
            padding: 1.5rem;
        }

        body.dark .device-list {
            background: var(--card-dark);
            border-color: var(--border-dark);
        }

        .device-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid var(--border-light);
            transition: background 0.2s ease;
        }

        body.dark .device-item {
            border-bottom-color: var(--border-dark);
        }

        .device-item:hover {
            background: rgba(139,92,246,0.05);
        }

        .device-item:last-child {
            border-bottom: none;
        }

        .device-info h4 {
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }

        .device-info p {
            font-size: 0.8rem;
            color: var(--primary-gray);
        }

        .device-status {
            padding: 0.25rem 0.75rem;
            border-radius: 1rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-online {
            background: rgba(16,185,129,0.1);
            color: var(--online-green);
        }

        .status-offline {
            background: rgba(239,68,68,0.1);
            color: var(--offline-red);
        }

        .status-warning {
            background: rgba(245,158,11,0.1);
            color: var(--warning-yellow);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background: var(--card-light);
            margin: 5% auto;
            padding: 2rem;
            border-radius: 1rem;
            width: 90%;
            max-width: 600px;
            position: relative;
            box-shadow: 0 20px 50px rgba(0,0,0,0.3);
            animation: modalFadeIn 0.3s ease;
        }

        body.dark .modal-content {
            background: var(--card-dark);
        }

        @@keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary-purple);
        }

        .close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--primary-gray);
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .close:hover {
            background: rgba(139,92,246,0.1);
            color: var(--primary-purple);
        }

        .discovery-content {
            text-align: center;
            padding: 2rem 0;
        }

        .discovery-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid var(--border-light);
            border-top: 4px solid var(--primary-purple);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        body.dark .discovery-spinner {
            border-color: var(--border-dark);
            border-top-color: var(--primary-purple);
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .discovered-devices {
            margin-top: 1.5rem;
        }.tab-navigation {
    margin-bottom: 1.5rem;
}

.tab-button {
    padding: 0.75rem 1.5rem;
    border: none;
    background: transparent;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    font-weight: 500;
    transition: all 0.2s ease;
    color: var(--primary-gray);
}

.tab-button.active {
    color: var(--primary-purple);
    border-bottom-color: var(--primary-purple);
}

        .discovered-device {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border: 1px solid var(--border-light);
            border-radius: 0.5rem;
            margin-bottom: 0.5rem;
            transition: all 0.2s ease;
        }

        body.dark .discovered-device {
            border-color: var(--border-dark);
        }

        .discovered-device:hover {
            background: rgba(139,92,246,0.05);
        }

        @@media (max-width: 768px) {
            .header {
                padding: 1rem;
                flex-direction: column;
                gap: 1rem;
            }

            .container {
                padding: 1rem;
            }

            .chart-section {
                grid-template-columns: 1fr;
            }

            .modal-content {
                margin: 10% auto;
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="logo-section">
            <div class="beacon-logo">
                <div class="beacon-icon"></div>
            </div>
            <h1>Beacon Monitoring System</h1>
        </div>
        <div class="controls">
            <button class="btn btn-primary" onclick="addDeviceModal.show()">Add Device</button>
            <button class="btn btn-secondary" onclick="showDiscoveryModal()">
                🔍 Discover Devices
            </button>
            <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
        </div>
    </header>

    <div class="container">
        <div class="metrics-grid">
            <div class="metric-card online">
                <div class="metric-number">12</div>
                <div class="metric-label">Devices Online</div>
            </div>
            <div class="metric-card offline">
                <div class="metric-number">3</div>
                <div class="metric-label">Devices Offline</div>
            </div>
            <div class="metric-card warning">
                <div class="metric-number">2</div>
                <div class="metric-label">Certificates Expiring</div>
            </div>
            <div class="metric-card">
                <div class="metric-number">5</div>
                <div class="metric-label">Active Alerts</div>
            </div>
        </div>

        <div class="chart-section">
            <div class="chart-card">
                <h3 class="chart-title">Device Status Over Time</h3>
                <canvas id="statusChart"></canvas>
            </div>
            <div class="chart-card">
                <h3 class="chart-title">Device Distribution</h3>
                <canvas id="distributionChart"></canvas>
            </div>
        </div>

        <div class="device-list">
            <h3 class="chart-title">Recent Device Activity</h3>
            <div class="device-item">
                <div class="device-info">
                    <h4>web-server-01</h4>
                    <p>192.168.1.100 • Last seen: 2 minutes ago</p>
                </div>
                <div class="device-status status-online">Online</div>
            </div>
            <div class="device-item">
                <div class="device-info">
                    <h4>database-primary</h4>
                    <p>192.168.1.101 • Last seen: 5 minutes ago</p>
                </div>
                <div class="device-status status-online">Online</div>
            </div>
            <div class="device-item">
                <div class="device-info">
                    <h4>backup-server</h4>
                    <p>192.168.1.102 • Last seen: 2 hours ago</p>
                </div>
                <div class="device-status status-warning">Stale</div>
            </div>
            <div class="device-item">
                <div class="device-info">
                    <h4>legacy-system</h4>
                    <p>192.168.1.103 • Last seen: 1 day ago</p>
                </div>
                <div class="device-status status-offline">Offline</div>
            </div>
        </div>
    </div>

    <!-- Discovery Modal -->
    <div id="discoveryModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Device Discovery</h2>
                <button class="close" onclick="closeDiscoveryModal()">&times;</button>
            </div>
            <div class="discovery-content">
                <div id="discoveryLoading" style="display: none;">
                    <div class="discovery-spinner"></div>
                    <p>Scanning network for devices...</p>
                </div>
                <div id="discoveryResults" style="display: none;">
                    <h3>Discovered Devices</h3>
                    <div class="discovered-devices" id="discoveredDevicesList">
                        <!-- Discovered devices will be populated here -->
                    </div>
                    <div style="margin-top: 1.5rem;">
                        <button class="btn btn-primary" onclick="addSelectedDevices()">Add Selected Devices</button>
                        <button class="btn btn-secondary" onclick="startDiscovery()">Scan Again</button>
                    </div>
                </div>
                <div id="discoveryStart">
                    <p>Click the button below to start scanning your network for beacon devices.</p>
                    <button class="btn btn-primary" onclick="startDiscovery()" style="margin-top: 1rem;">Start Discovery</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Theme toggle functionality
        function toggleTheme() {
            document.body.classList.toggle('dark');
            const themeToggle = document.querySelector('.theme-toggle');
            themeToggle.textContent = document.body.classList.contains('dark') ? '☀️' : '🌙';

            // Update charts for theme
            updateChartThemes();
        }

        // Discovery Modal Functions
        function showDiscoveryModal() {
            document.getElementById('discoveryModal').style.display = 'block';
            document.getElementById('discoveryStart').style.display = 'block';
            document.getElementById('discoveryLoading').style.display = 'none';
            document.getElementById('discoveryResults').style.display = 'none';
        }

        function closeDiscoveryModal() {
            document.getElementById('discoveryModal').style.display = 'none';
        }

        function startDiscovery() {
            document.getElementById('discoveryStart').style.display = 'none';
            document.getElementById('discoveryResults').style.display = 'none';
            document.getElementById('discoveryLoading').style.display = 'block';

            // Simulate discovery process - replace this with your actual API call
            setTimeout(() => {
                simulateDiscoveryResults();
            }, 3000);

            // TODO: Replace with actual API call to your discovery endpoint
            // Example:
            // fetch('/api/devices/discover')
            //     .then(response => response.json())
            //     .then(data => {
            //         displayDiscoveryResults(data);
            //     })
            //     .catch(error => {
            //         console.error('Discovery failed:', error);
            //         // Handle error
            //     });
        }

        function simulateDiscoveryResults() {
            // Mock discovered devices - replace with actual API response handling
            const mockDevices = [
                { name: 'sensor-device-04', ip: '192.168.1.104', type: 'Temperature Sensor', status: 'Available' },
                { name: 'camera-system-02', ip: '192.168.1.105', type: 'Security Camera', status: 'Available' },
                { name: 'access-point-01', ip: '192.168.1.106', type: 'WiFi Access Point', status: 'Available' }
            ];

            displayDiscoveryResults(mockDevices);
        }

        function displayDiscoveryResults(devices) {
            document.getElementById('discoveryLoading').style.display = 'none';
            document.getElementById('discoveryResults').style.display = 'block';

            const devicesList = document.getElementById('discoveredDevicesList');
            devicesList.innerHTML = '';

            devices.forEach(device => {
                const deviceElement = document.createElement('div');
                deviceElement.className = 'discovered-device';
                deviceElement.innerHTML = `
                    <div>
                        <input type="checkbox" id="device-${device.ip}" value="${device.ip}" style="margin-right: 0.5rem;">
                        <label for="device-${device.ip}">
                            <strong>${device.name}</strong><br>
                            <small>${device.ip} • ${device.type}</small>
                        </label>
                    </div>
                    <div class="device-status status-online">${device.status}</div>
                `;
                devicesList.appendChild(deviceElement);
            });
        }
        // Add Device Modal Component - Complete Implementation
        class AddDeviceModal {
            constructor() {
                this.isVisible = false;
                this.currentTab = 'quick';
                this.isLoading = false;
                this.customPortCounter = 0;
                this.init();
            }

            init() {
                this.createModal();
                this.attachEventListeners();
            }

            createModal() {
                const modalHTML = `
                <div id="addDeviceModal" class="modal" style="display: none;">
                    <div class="modal-content" style="max-width: 700px;">
                        <div class="modal-header">
                            <h2 class="modal-title">Add Device</h2>
                            <button class="close" onclick="addDeviceModal.hide()">&times;</button>
                        </div>

                        <!-- Tab Navigation -->
                        <div class="tab-navigation" style="display: flex; border-bottom: 2px solid var(--border-light); margin-bottom: 2rem;">
                            <button class="tab-button active" data-tab="quick" onclick="addDeviceModal.switchTab('quick')">
                                🚀 Quick Add
                            </button>
                            <button class="tab-button" data-tab="manual" onclick="addDeviceModal.switchTab('manual')">
                                ⚙️ Manual
                            </button>
                            <button class="tab-button" data-tab="bulk" onclick="addDeviceModal.switchTab('bulk')">
                                📋 Bulk Import
                            </button>
                        </div>

                        <!-- Quick Add Tab -->
                        <div id="quickAddTab" class="tab-content">
                            <div class="form-section">
                                <h3>Quick Device Add</h3>
                                <p>Enter an IP address and we'll automatically detect the hostname and scan for common services.</p>

                                <div class="form-group">
                                    <label for="quickIpAddress">IP Address *</label>
                                    <input type="text" id="quickIpAddress" placeholder="192.168.1.100" required>
                                    <small>We'll ping the device and scan common ports automatically</small>
                                </div>

                                <div class="form-actions">
                                    <button class="btn btn-primary" onclick="addDeviceModal.quickAddDevice()" id="quickAddBtn">
                                        <span class="btn-text">🔍 Add & Scan Device</span>
                                        <div class="btn-spinner" style="display: none;">
                                            <div class="discovery-spinner"></div>
                                        </div>
                                    </button>
                                    <button class="btn btn-secondary" onclick="addDeviceModal.hide()">Cancel</button>
                                </div>
                            </div>
                        </div>

                        <!-- Manual Add Tab -->
                        <div id="manualAddTab" class="tab-content" style="display: none;">
                            <div class="form-section">
                                <h3>Manual Device Configuration</h3>
                                <p>Manually configure device details and specify which ports to monitor.</p>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label for="manualIpAddress">IP Address *</label>
                                        <input type="text" id="manualIpAddress" placeholder="192.168.1.100" required>
                                    </div>
                                    <div class="form-group">
                                        <label for="manualHostname">Hostname</label>
                                        <input type="text" id="manualHostname" placeholder="web-server-01">
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Monitored Ports</label>
                                    <div class="ports-container">
                                        <div class="common-ports">
                                            <p><strong>Common Services:</strong></p>
                                            <div class="port-checkboxes">
                                                <label><input type="checkbox" value="22" data-service="SSH"> 22 (SSH)</label>
                                                <label><input type="checkbox" value="80" data-service="HTTP"> 80 (HTTP)</label>
                                                <label><input type="checkbox" value="443" data-service="HTTPS"> 443 (HTTPS)</label>
                                                <label><input type="checkbox" value="3389" data-service="RDP"> 3389 (RDP)</label>
                                                <label><input type="checkbox" value="25" data-service="SMTP"> 25 (SMTP)</label>
                                                <label><input type="checkbox" value="53" data-service="DNS"> 53 (DNS)</label>
                                            </div>
                                        </div>

                                        <div class="custom-ports">
                                            <p><strong>Custom Ports:</strong></p>
                                            <div id="customPortsList">
                                                <!-- Custom ports will be added here -->
                                            </div>
                                            <button type="button" class="btn-small" onclick="addDeviceModal.addCustomPort()">
                                                + Add Custom Port
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <button class="btn btn-primary" onclick="addDeviceModal.manualAddDevice()" id="manualAddBtn">
                                        <span class="btn-text">➕ Add Device</span>
                                        <div class="btn-spinner" style="display: none;">
                                            <div class="discovery-spinner"></div>
                                        </div>
                                    </button>
                                    <button class="btn btn-secondary" onclick="addDeviceModal.hide()">Cancel</button>
                                </div>
                            </div>
                        </div>

                        <!-- Bulk Import Tab -->
                        <div id="bulkAddTab" class="tab-content" style="display: none;">
                            <div class="form-section">
                                <h3>Bulk Device Import</h3>
                                <p>Import multiple devices at once using CSV format or by entering IP addresses.</p>

                                <div class="bulk-options">
                                    <div class="bulk-option">
                                        <h4>📝 Text Input</h4>
                                        <textarea id="bulkTextArea" placeholder="Enter IP addresses, one per line:&#10;192.168.1.100&#10;192.168.1.101&#10;192.168.1.102" rows="6"></textarea>
                                    </div>

                                    <div class="bulk-option">
                                        <h4>📁 CSV Upload</h4>
                                        <input type="file" id="csvFileInput" accept=".csv" onchange="addDeviceModal.handleCsvUpload(event)">
                                        <small>CSV format: ip_address,hostname (hostname is optional)</small>
                                        <div id="csvPreview"></div>
                                    </div>
                                </div>

                                <div class="form-actions">
                                    <button class="btn btn-primary" onclick="addDeviceModal.bulkAddDevices()" id="bulkAddBtn">
                                        <span class="btn-text">📤 Import Devices</span>
                                        <div class="btn-spinner" style="display: none;">
                                            <div class="discovery-spinner"></div>
                                        </div>
                                    </button>
                                    <button class="btn btn-secondary" onclick="addDeviceModal.hide()">Cancel</button>
                                </div>
                            </div>
                        </div>

                        <!-- Results Display -->
                        <div id="resultsSection" style="display: none; margin-top: 2rem; padding-top: 2rem; border-top: 1px solid var(--border-light);">
                            <h3>Results</h3>
                            <div id="resultsContent"></div>
                        </div>
                    </div>
                </div>`;

                document.body.insertAdjacentHTML('beforeend', modalHTML);
            }

            show() {
                const modal = document.getElementById('addDeviceModal');
                if (modal) {
                    modal.style.display = 'block';
                    this.isVisible = true;
                    // Reset to quick add tab
                    this.switchTab('quick');
                    this.clearForms();
                }
            }

            hide() {
                const modal = document.getElementById('addDeviceModal');
                if (modal) {
                    modal.style.display = 'none';
                    this.isVisible = false;
                    this.hideResults();
                }
            }

            switchTab(tabName) {
                // Hide all tabs
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.style.display = 'none';
                });

                // Remove active class from all buttons
                document.querySelectorAll('.tab-button').forEach(btn => {
                    btn.classList.remove('active');
                });

                // Show selected tab
                const targetTab = document.getElementById(tabName + 'AddTab');
                if (targetTab) {
                    targetTab.style.display = 'block';
                }

                const targetButton = document.querySelector(`[data-tab="${tabName}"]`);
                if (targetButton) {
                    targetButton.classList.add('active');
                }

                this.currentTab = tabName;
                this.hideResults();
            }

            quickAddDevice() {
                const ip = document.getElementById('quickIpAddress').value.trim();

                if (!ip) {
                    alert('Please enter an IP address');
                    return;
                }

                if (!this.isValidIP(ip)) {
                    alert('Please enter a valid IP address');
                    return;
                }

                this.setLoadingState('quickAddBtn', true);

                // Simulate API call - replace with actual implementation
                setTimeout(() => {
                    this.setLoadingState('quickAddBtn', false);
                    this.showResults([{
                        ip: ip,
                        hostname: 'auto-detected-host',
                        status: 'success',
                        message: 'Device added successfully with auto-detected ports: 22 (SSH), 80 (HTTP)',
                        ports: [
                            { port: 22, service: 'SSH', status: 'open' },
                            { port: 80, service: 'HTTP', status: 'open' },
                            { port: 443, service: 'HTTPS', status: 'closed' }
                        ]
                    }]);
                }, 2000);

                // TODO: Replace with actual API call
                // this.callAPI('/api/devices/quick-add', { ip: ip });
            }

            manualAddDevice() {
                const ip = document.getElementById('manualIpAddress').value.trim();
                const hostname = document.getElementById('manualHostname').value.trim();

                if (!ip) {
                    alert('Please enter an IP address');
                    return;
                }

                if (!this.isValidIP(ip)) {
                    alert('Please enter a valid IP address');
                    return;
                }

                const selectedPorts = this.getSelectedPorts();

                if (selectedPorts.length === 0) {
                    alert('Please select at least one port to monitor');
                    return;
                }

                this.setLoadingState('manualAddBtn', true);

                // Simulate API call
                setTimeout(() => {
                    this.setLoadingState('manualAddBtn', false);
                    this.showResults([{
                        ip: ip,
                        hostname: hostname || 'manual-device',
                        status: 'success',
                        message: `Device added successfully with ${selectedPorts.length} monitored ports`,
                        ports: selectedPorts.map(port => ({
                            port: port.port,
                            service: port.service,
                            status: Math.random() > 0.3 ? 'open' : 'closed'
                        }))
                    }]);
                }, 1500);

                // TODO: Replace with actual API call
                // this.callAPI('/api/devices/manual-add', { ip, hostname, ports: selectedPorts });
            }

            bulkAddDevices() {
                const textInput = document.getElementById('bulkTextArea').value.trim();
                const csvFile = document.getElementById('csvFileInput').files[0];

                let devices = [];

                if (textInput) {
                    devices = this.parseTextInput(textInput);
                } else if (csvFile) {
                    // For demo, we'll simulate CSV parsing
                    devices = [
                        { ip: '192.168.1.100', hostname: 'server-01' },
                        { ip: '192.168.1.101', hostname: 'server-02' },
                        { ip: '192.168.1.102', hostname: 'server-03' }
                    ];
                }

                if (devices.length === 0) {
                    alert('Please enter IP addresses or upload a CSV file');
                    return;
                }

                this.setLoadingState('bulkAddBtn', true);

                // Simulate bulk processing
                setTimeout(() => {
                    this.setLoadingState('bulkAddBtn', false);
                    const results = devices.map(device => ({
                        ...device,
                        status: Math.random() > 0.2 ? 'success' : 'error',
                        message: Math.random() > 0.2 ? 'Device added successfully' : 'Failed to add device - already exists'
                    }));
                    this.showResults(results);
                }, 3000);

                // TODO: Replace with actual API call
                // this.callAPI('/api/devices/bulk-add', { devices });
            }

            addCustomPort() {
                const customPortsList = document.getElementById('customPortsList');
                const portId = 'customPort' + (++this.customPortCounter);

                const portRow = document.createElement('div');
                portRow.className = 'custom-port-row';
                portRow.innerHTML = `
                    <input type="number" id="${portId}" placeholder="Port number" min="1" max="65535">
                    <input type="text" placeholder="Service name (optional)">
                    <button type="button" class="btn-small" onclick="this.parentElement.remove()" style="background: #ef4444; color: white;">×</button>
                `;

                customPortsList.appendChild(portRow);
            }

            handleCsvUpload(event) {
                const file = event.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = (e) => {
                    const csvContent = e.target.result;
                    const preview = document.getElementById('csvPreview');

                    // Simple CSV preview - first 5 lines
                    const lines = csvContent.split('\n').slice(0, 5);
                    preview.innerHTML = `
                        <div class="csv-preview">
                            <strong>Preview:</strong><br>
                            ${lines.join('<br>')}
                            ${csvContent.split('\n').length > 5 ? '<br>... and more' : ''}
                        </div>
                    `;
                };
                reader.readAsText(file);
            }

            getSelectedPorts() {
                const ports = [];

                // Get common ports
                document.querySelectorAll('.port-checkboxes input:checked').forEach(checkbox => {
                    ports.push({
                        port: parseInt(checkbox.value),
                        service: checkbox.dataset.service
                    });
                });

                // Get custom ports
                document.querySelectorAll('.custom-port-row').forEach(row => {
                    const portInput = row.querySelector('input[type="number"]');
                    const serviceInput = row.querySelector('input[type="text"]');

                    if (portInput.value) {
                        ports.push({
                            port: parseInt(portInput.value),
                            service: serviceInput.value || 'Custom'
                        });
                    }
                });

                return ports;
            }

            parseTextInput(text) {
                return text.split('\n')
                    .map(line => line.trim())
                    .filter(line => line && this.isValidIP(line))
                    .map(ip => ({ ip, hostname: '' }));
            }

            isValidIP(ip) {
                const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
                return ipRegex.test(ip);
            }

            setLoadingState(buttonId, isLoading) {
                const button = document.getElementById(buttonId);
                if (!button) return;

                const btnText = button.querySelector('.btn-text');
                const spinner = button.querySelector('.btn-spinner');

                if (isLoading) {
                    btnText.style.display = 'none';
                    spinner.style.display = 'inline-flex';
                    button.disabled = true;
                } else {
                    btnText.style.display = 'inline';
                    spinner.style.display = 'none';
                    button.disabled = false;
                }
            }

            showResults(results) {
                const resultsSection = document.getElementById('resultsSection');
                const resultsContent = document.getElementById('resultsContent');

                resultsContent.innerHTML = '';

                results.forEach(result => {
                    const resultItem = document.createElement('div');
                    resultItem.className = `result-item ${result.status === 'success' ? 'result-success' : 'result-error'}`;

                    let portsHtml = '';
                    if (result.ports) {
                        portsHtml = '<div style="margin-top: 0.5rem;">' +
                            result.ports.map(port =>
                                `<span class="port-status port-${port.status}">${port.port} (${port.service})</span>`
                            ).join(' ') + '</div>';
                    }

                    resultItem.innerHTML = `
                        <h4>${result.hostname || result.ip}</h4>
                        <p>${result.message}</p>
                        ${portsHtml}
                    `;

                    resultsContent.appendChild(resultItem);
                });

                resultsSection.style.display = 'block';
            }

            hideResults() {
                const resultsSection = document.getElementById('resultsSection');
                if (resultsSection) {
                    resultsSection.style.display = 'none';
                }
            }

            clearForms() {
                // Clear quick add
                document.getElementById('quickIpAddress').value = '';

                // Clear manual add
                document.getElementById('manualIpAddress').value = '';
                document.getElementById('manualHostname').value = '';
                document.querySelectorAll('.port-checkboxes input').forEach(cb => cb.checked = false);
                document.getElementById('customPortsList').innerHTML = '';

                // Clear bulk add
                document.getElementById('bulkTextArea').value = '';
                document.getElementById('csvFileInput').value = '';
                document.getElementById('csvPreview').innerHTML = '';

                this.customPortCounter = 0;
            }

            attachEventListeners() {
                // Close modal when clicking outside
                window.addEventListener('click', (event) => {
                    const modal = document.getElementById('addDeviceModal');
                    if (event.target === modal) {
                        this.hide();
                    }
                });

                // Handle escape key
                document.addEventListener('keydown', (event) => {
                    if (event.key === 'Escape' && this.isVisible) {
                        this.hide();
                    }
                });
            }

            // API helper method - implement based on your backend
            async callAPI(endpoint, data) {
                try {
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();
                    return result;
                } catch (error) {
                    console.error('API call failed:', error);
                    throw error;
                }
            }
        }

        // Initialize the modal when the DOM is loaded
        document.addEventListener('DOMContentLoaded', function () {
            window.addDeviceModal = new AddDeviceModal();
        });
        function addSelectedDevices() {
            const checkboxes = document.querySelectorAll('#discoveredDevicesList input[type="checkbox"]:checked');
            const selectedDevices = Array.from(checkboxes).map(cb => cb.value);
            
            if (selectedDevices.length > 0) {
                // TODO: Send selected devices to your backend API
                console.log('Adding devices:', selectedDevices);
                
                // Example API call:
                // fetch('/api/devices/add', {
                //     method: 'POST',
                //     headers: { 'Content-Type': 'application/json' },
                //     body: JSON.stringify({ devices: selectedDevices })
                // });
                
                alert(`Added ${selectedDevices.length} device(s) to monitoring.`);
                closeDiscoveryModal();
                
                // Refresh the page or update the device list
                // location.reload();
            } else {
                alert('Please select at least one device to add.');
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('discoveryModal');
            if (event.target === modal) {
                closeDiscoveryModal();
            }
        }

        // Chart.js configuration
        Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
        Chart.defaults.color = '#6B7280';

        // Status over time chart
        const statusCtx = document.getElementById('statusChart').getContext('2d');
        const statusChart = new Chart(statusCtx, {
            type: 'line',
            data: {
                labels: ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00', '24:00'],
                datasets: [{
                    label: 'Online Devices',
                    data: [8, 12, 15, 18, 16, 14, 12],
                    borderColor: '#10B981',
                    backgroundColor: 'rgba(16,185,129,0.1)',
                    tension: 0.4,
                    fill: true
                }, {
                    label: 'Offline Devices',
                    data: [4, 2, 1, 0, 2, 3, 3],
                    borderColor: '#EF4444',
                    backgroundColor: 'rgba(239,68,68,0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                interaction: {
                    intersect: false,
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(0,0,0,0.1)'
                        }
                    },
                    x: {
                        grid: {
                            color: 'rgba(0,0,0,0.1)'
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                    }
                }
            }
        });

        // Distribution pie chart
        const distributionCtx = document.getElementById('distributionChart').getContext('2d');
        const distributionChart = new Chart(distributionCtx, {
            type: 'doughnut',
            data: {
                labels: ['Online', 'Offline', 'Warning'],
                datasets: [{
                    data: [12, 3, 2],
                    backgroundColor: ['#10B981', '#EF4444', '#F59E0B'],
                    borderWidth: 0,
                    cutout: '70%'
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                    }
                }
            }
        });

        function updateChartThemes() {
            const isDark = document.body.classList.contains('dark');
            const textColor = isDark ? '#F1F5F9' : '#6B7280';
            const gridColor = isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)';

            Chart.defaults.color = textColor;

            statusChart.options.scales.y.grid.color = gridColor;
            statusChart.options.scales.x.grid.color = gridColor;
            statusChart.update();

            distributionChart.update();
        }

        // Simulate real-time updates
        setInterval(function () {
            const metrics = document.querySelectorAll('.metric-number');
            metrics.forEach(function (metric) {
                const currentValue = parseInt(metric.textContent);
                const change = Math.random() > 0.5 ? 1 : -1;
                const newValue = Math.max(0, currentValue + (Math.random() > 0.8 ? change : 0));
                metric.textContent = newValue;
            });
        }, 5000);
    </script>
</body>
</html>