<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beacon Monitoring System</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        :root {
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --accent-color: #f093fb;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --card-bg: #ffffff;
            --text-color: #333333;
            --text-muted: #6c757d;
            --border-color: #dee2e6;
            --input-bg: #ffffff;
            --bg-color: #f5f7fa;
        }

        [data-theme="dark"] {
            --card-bg: #2d3748;
            --text-color: #e2e8f0;
            --text-muted: #a0aec0;
            --border-color: #4a5568;
            --input-bg: #4a5568;
            --bg-color: #1a202c;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg-color);
            color: var(--text-color);
            line-height: 1.6;
            transition: all 0.3s ease;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3rem;
            padding: 1.5rem;
            background: var(--card-bg);
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .beacon-logo {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .beacon-icon::before {
            content: "📡";
            font-size: 24px;
        }

        .gradient-text {
            background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 2rem;
            font-weight: 700;
        }

        .controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
        }

        .btn-secondary {
            background: var(--info-color);
            color: white;
        }

        .btn-accent {
            background: linear-gradient(135deg, var(--accent-color), #f093fb);
            color: white;
        }

        .btn-outline {
            background: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .theme-toggle {
            background: var(--card-bg);
            border: 2px solid var(--border-color);
            border-radius: 50%;
            width: 45px;
            height: 45px;
            cursor: pointer;
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .metric-card {
            background: var(--card-bg);
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
            border-left: 4px solid var(--primary-color);
        }

            .metric-card:hover {
                transform: translateY(-5px);
            }

            .metric-card.online {
                border-left-color: var(--success-color);
            }

            .metric-card.offline {
                border-left-color: var(--danger-color);
            }

            .metric-card.warning {
                border-left-color: var(--warning-color);
            }

            .metric-card.total {
                border-left-color: var(--info-color);
            }

            .metric-card.urls-up {
                border-left-color: var(--success-color);
            }

            .metric-card.urls-down {
                border-left-color: var(--danger-color);
            }

            .metric-card.cert-expiring {
                border-left-color: var(--warning-color);
            }

            .metric-card.cert-expired {
                border-left-color: var(--danger-color);
            }

        .metric-number {
            font-size: 3rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .metric-label {
            color: var(--text-muted);
            font-weight: 500;
        }

        .chart-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .chart-card {
            background: var(--card-bg);
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        .chart-title {
            color: var(--text-color);
            margin-bottom: 1.5rem;
            font-size: 1.3rem;
            font-weight: 600;
        }

        .device-list {
            margin-bottom: 3rem;
        }

        .device-list-container {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            max-height: 400px;
            overflow-y: auto;
        }

        .device-item {
            padding: 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            background: var(--bg-color);
            transition: all 0.3s ease;
        }

            .device-item:hover {
                transform: translateX(5px);
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

        .device-link {
            text-decoration: none;
            color: var(--text-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .device-link:hover {
                color: var(--primary-color);
            }

        .ip {
            color: var(--text-muted);
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: var(--card-bg);
            margin: 5% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 2rem;
            border-bottom: 1px solid var(--border-color);
        }

        .modal-title {
            color: var(--text-color);
            font-size: 1.5rem;
            font-weight: 600;
        }

        .close {
            background: none;
            border: none;
            font-size: 2rem;
            cursor: pointer;
            color: var(--text-muted);
            transition: color 0.3s ease;
        }

            .close:hover {
                color: var(--danger-color);
            }

        .modal-body {
            padding: 2rem;
        }

        .modal-form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

            .form-group label {
                margin-bottom: 0.5rem;
                font-weight: 500;
                color: var(--text-color);
            }

            .form-group input,
            .form-group textarea,
            .form-group select {
                padding: 0.75rem;
                border: 2px solid var(--border-color);
                border-radius: 8px;
                background: var(--input-bg);
                color: var(--text-color);
                transition: border-color 0.3s ease;
            }

                .form-group input:focus,
                .form-group textarea:focus,
                .form-group select:focus {
                    outline: none;
                    border-color: var(--primary-color);
                }

        .discovery-content {
            padding: 2rem;
            text-align: center;
        }

        .discovery-spinner {
            width: 50px;
            height: 50px;
            border: 4px solid var(--border-color);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .discovered-devices {
            text-align: left;
            max-height: 300px;
            overflow-y: auto;
        }

        .discovered-device {
            padding: 1rem;
            margin-bottom: 0.5rem;
            background: var(--bg-color);
            border-radius: 8px;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .url-monitor-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px;
            margin-bottom: 8px;
            border-radius: 8px;
            background: var(--bg-color);
            border-left: 4px solid var(--success-color);
            transition: all 0.3s ease;
        }

            .url-monitor-item:hover {
                transform: translateX(5px);
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

            .url-monitor-item.status-down {
                border-left-color: var(--danger-color);
            }

            .url-monitor-item.status-error {
                border-left-color: var(--warning-color);
            }

            .url-monitor-item.status-timeout {
                border-left-color: var(--warning-color);
            }

        .url-info .url-details {
            display: flex;
            gap: 12px;
            align-items: center;
            margin-top: 4px;
        }

        .url-details .url {
            color: var(--text-muted);
            font-size: 0.9em;
            font-family: 'Courier New', monospace;
        }

        .url-details .status {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: 500;
        }

        .status-up {
            background: rgba(40, 167, 69, 0.2);
            color: var(--success-color);
        }

        .status-down {
            background: rgba(220, 53, 69, 0.2);
            color: var(--danger-color);
        }

        .status-error, .status-timeout {
            background: rgba(255, 193, 7, 0.2);
            color: #856404;
        }

        .response-time {
            font-size: 0.8em;
            color: var(--text-muted);
            font-weight: 500;
        }

        .cert-info {
            text-align: right;
            font-size: 0.85em;
        }

            .cert-info .cert-name {
                font-weight: 500;
                display: block;
                color: var(--text-color);
            }

            .cert-info .cert-expiry {
                color: var(--text-muted);
                display: block;
            }

            .cert-info .cert-days {
                font-weight: 500;
                display: block;
            }

        .cert-valid .cert-days {
            color: var(--success-color);
        }

        .cert-expiring .cert-days {
            color: var(--warning-color);
        }

        .cert-expired .cert-days {
            color: var(--danger-color);
        }

        .cert-none {
            color: var(--text-muted);
        }

        @@media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .header {
                flex-direction: column;
                gap: 1rem;
            }

            .controls {
                flex-wrap: wrap;
                justify-content: center;
            }

            .chart-section {
                grid-template-columns: 1fr;
            }

            .metrics-grid {
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <div class="logo-section">
                <div class="beacon-logo"><div class="beacon-icon"></div></div>
                <h1 class="gradient-text">Beacon Monitoring System</h1>
            </div>
            <div class="controls">
                <button class="btn btn-primary" onclick="showAddDeviceModal()">📱 Add Device</button>
                <button class="btn btn-secondary" onclick="showDiscoveryModal()">🔍 Discover Devices</button>
                <button class="btn btn-accent" onclick="showUrlMonitorModal()">🌐 Add URL Monitor</button>
                <button class="btn btn-outline" onclick="checkAllUrls()">🔄 Check All URLs</button>
                <button class="theme-toggle" onclick="toggleTheme()">🌙</button>
            </div>
        </header>

        <section class="metrics-grid">
            <div class="metric-card online">
                <div class="metric-number">0</div>
                <div class="metric-label">Devices Online</div>
            </div>
            <div class="metric-card offline">
                <div class="metric-number">0</div>
                <div class="metric-label">Devices Offline</div>
            </div>
            <div class="metric-card warning">
                <div class="metric-number">0</div>
                <div class="metric-label">Recently Added</div>
            </div>
            <div class="metric-card total">
                <div class="metric-number">0</div>
                <div class="metric-label">Total Devices</div>
            </div>
            <div class="metric-card urls-up">
                <div class="metric-number">0</div>
                <div class="metric-label">URLs Up</div>
            </div>
            <div class="metric-card urls-down">
                <div class="metric-number">0</div>
                <div class="metric-label">URLs Down</div>
            </div>
            <div class="metric-card cert-expiring">
                <div class="metric-number">0</div>
                <div class="metric-label">Certs Expiring</div>
            </div>
            <div class="metric-card cert-expired">
                <div class="metric-number">0</div>
                <div class="metric-label">Certs Expired</div>
            </div>
        </section>

        <section class="chart-section">
            <div class="chart-card">
                <h3 class="chart-title">Device Status Over Time</h3>
                <canvas id="statusChart"></canvas>
            </div>
            <div class="chart-card">
                <h3 class="chart-title">URL Response Times</h3>
                <canvas id="responseChart"></canvas>
            </div>
        </section>

        <section class="device-list">
            <h3 class="chart-title">Recent Device Activity</h3>
            <div id="deviceListContainer" class="device-list-container">
                <p style="text-align: center; color: var(--text-muted);">Loading...</p>
            </div>
        </section>

        <section class="device-list">
            <h3 class="chart-title">URL Monitoring Status</h3>
            <div id="urlMonitorContainer" class="device-list-container">
                <p style="text-align: center; color: var(--text-muted);">Loading...</p>
            </div>
        </section>
    </div>

    <!-- Add Device Modal -->
    <div id="addDeviceModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Add New Device</h2>
                <button class="close" onclick="closeAddDeviceModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="addDeviceForm" class="modal-form">
                    <div class="form-group">
                        <label for="deviceIp">IP Address *</label>
                        <input type="text" id="deviceIp" name="ipAddress" placeholder="192.168.1.100" required pattern="^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$">
                    </div>
                    <div class="form-group">
                        <label for="deviceHostname">Hostname</label>
                        <input type="text" id="deviceHostname" name="hostname" placeholder="server-01">
                    </div>
                    <div class="form-group">
                        <label for="deviceType">Device Type</label>
                        <select id="deviceType" name="deviceType">
                            <option value="">Select Type</option>
                            <option value="server">Server</option>
                            <option value="router">Router</option>
                            <option value="switch">Switch</option>
                            <option value="firewall">Firewall</option>
                            <option value="printer">Printer</option>
                            <option value="workstation">Workstation</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="deviceDescription">Description</label>
                        <textarea id="deviceDescription" name="description" rows="3" placeholder="Optional description..."></textarea>
                    </div>
                    <div class="form-group">
                        <label for="monitoringEnabled">
                            <input type="checkbox" id="monitoringEnabled" name="monitoringEnabled" checked>
                            Enable monitoring
                        </label>
                    </div>
                    <div style="margin-top: 1.5rem; display: flex; gap: 1rem;">
                        <button type="button" class="btn btn-primary" onclick="addDevice()">Add Device</button>
                        <button type="button" class="btn btn-secondary" onclick="closeAddDeviceModal()">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Network Discovery Modal -->
    <div id="discoveryModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Network Device Discovery</h2>
                <button class="close" onclick="closeDiscoveryModal()">&times;</button>
            </div>
            <div id="discoveryLoading" class="discovery-content">
                <div class="discovery-spinner"></div>
                <p>Scanning network for devices...</p>
                <p style="color: var(--text-muted); font-size: 0.9em;">This may take a few moments</p>
            </div>
            <div id="discoveryResults" class="discovery-content" style="display:none;">
                <h3>Discovered Devices</h3>
                <div id="discoveredDevicesList" class="discovered-devices"></div>
                <div style="margin-top: 1.5rem; display: flex; gap: 1rem; justify-content: center;">
                    <button class="btn btn-primary" onclick="addSelectedDevices()">Add Selected Devices</button>
                    <button class="btn btn-secondary" onclick="showDiscoveryModal()">Scan Again</button>
                    <button class="btn btn-outline" onclick="closeDiscoveryModal()">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- URL Monitor Modal -->
    <div id="urlMonitorModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Add URL Monitor</h2>
                <button class="close" onclick="closeUrlMonitorModal()">&times;</button>
            </div>
            <div class="modal-body">
                <form id="urlMonitorForm" class="modal-form">
                    <div class="form-group">
                        <label for="url">URL *</label>
                        <input type="url" id="url" name="url" placeholder="https://example.com" required>
                    </div>
                    <div class="form-group">
                        <label for="name">Name</label>
                        <input type="text" id="name" name="name" placeholder="My Website">
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="description" rows="3" placeholder="Optional description..."></textarea>
                    </div>
                    <div class="form-group">
                        <label for="checkInterval">Check Interval (minutes)</label>
                        <select id="checkInterval" name="checkInterval">
                            <option value="1">1 minute</option>
                            <option value="5" selected>5 minutes</option>
                            <option value="10">10 minutes</option>
                            <option value="30">30 minutes</option>
                            <option value="60">1 hour</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="timeout">Timeout (seconds)</label>
                        <input type="number" id="timeout" name="timeout" value="30" min="5" max="300">
                    </div>
                    <div style="margin-top: 1.5rem; display: flex; gap: 1rem;">
                        <button type="button" class="btn btn-primary" onclick="addUrlMonitor()">Add Monitor</button>
                        <button type="button" class="btn btn-secondary" onclick="closeUrlMonitorModal()">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <
</body>

<script>
    // Theme toggle setup
    function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
    }

    function initializeTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
    }

    // Modal controls
    function showAddDeviceModal() {
        document.getElementById('addDeviceModal').style.display = 'block';
    }

    function closeAddDeviceModal() {
        document.getElementById('addDeviceModal').style.display = 'none';
    }

    function showDiscoveryModal() {
        document.getElementById('discoveryModal').style.display = 'block';
        document.getElementById('discoveryLoading').style.display = 'block';
        document.getElementById('discoveryResults').style.display = 'none';
        scanNetwork();
    }

    function closeDiscoveryModal() {
        document.getElementById('discoveryModal').style.display = 'none';
    }

    function showUrlMonitorModal() {
        document.getElementById('urlMonitorModal').style.display = 'block';
    }

    function closeUrlMonitorModal() {
        document.getElementById('urlMonitorModal').style.display = 'none';
    }

    // Initialization
    document.addEventListener('DOMContentLoaded', () => {
        initializeTheme();
        loadMetrics();
        loadChartData();
        loadRecentDevices();
        loadUrlMonitors();
        initializeCharts();
    });

    // Load metrics
    async function loadMetrics() {
        try {
            const deviceRes = await fetch('/api/Discovery/status');
            const deviceData = await deviceRes.json();
            document.querySelector('.metric-card.online .metric-number').textContent = deviceData.onlineDevices;
            document.querySelector('.metric-card.offline .metric-number').textContent = deviceData.offlineDevices;
            document.querySelector('.metric-card.warning .metric-number').textContent = deviceData.recentlyAddedDevices;
            document.querySelector('.metric-card.total .metric-number').textContent = deviceData.totalManagedDevices;

            const urlRes = await fetch('/api/UrlMonitor/status');
            const urlData = await urlRes.json();
            document.querySelector('.metric-card.urls-up .metric-number').textContent = urlData.upUrls;
            document.querySelector('.metric-card.urls-down .metric-number').textContent = urlData.downUrls;
            document.querySelector('.metric-card.cert-expiring .metric-number').textContent = urlData.expiringCertificates;
            document.querySelector('.metric-card.cert-expired .metric-number').textContent = urlData.expiredCertificates;
        } catch (error) {
            console.error('Error loading metrics:', error);
            document.querySelectorAll('.metric-number').forEach(el => el.textContent = '0');
        }
    }

    async function loadChartData() {
        // Placeholder for future chart data
    }

    async function loadRecentDevices() {
        try {
            const res = await fetch('/Devices/api/devices');
            const data = await res.json();
            const container = document.getElementById('deviceListContainer');
            container.innerHTML = '';

            if (data.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: var(--text-muted);">No devices found</p>';
                return;
            }

            data.slice(0, 10).forEach(device => {
                const statusClass = device.status ? device.status.toLowerCase() : 'unknown';
                const el = document.createElement('div');
                el.className = 'device-item';
                el.innerHTML = `
                            <a href='/Devices/Details/${device.id}' class='device-link'>
                                <div>
                                    <strong>${device.hostname}</strong>
                                    <span class='ip'>${device.ipAddress}</span>
                                </div>
                                <span class='status status-${statusClass}'>${device.status || 'Unknown'}</span>
                            </a>
                        `;
                container.appendChild(el);
            });
        } catch (error) {
            console.error('Error loading devices:', error);
            document.getElementById('deviceListContainer').innerHTML =
                '<p style="text-align: center; color: var(--text-muted);">Error loading devices</p>';
        }
    }

    async function loadUrlMonitors() {
        try {
            const res = await fetch('/api/UrlMonitor/status');
            const data = await res.json();
            const container = document.getElementById('urlMonitorContainer');
            container.innerHTML = '';

            if (!data.monitors || data.monitors.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: var(--text-muted);">No URL monitors configured</p>';
                return;
            }

            data.monitors.slice(0, 10).forEach(monitor => {
                const statusClass = monitor.status.toLowerCase();
                const certStatus = monitor.certificate ?
                    (monitor.certificate.isExpired ? 'expired' :
                        monitor.certificate.isExpiringSoon ? 'expiring' : 'valid') : 'none';

                const el = document.createElement('div');
                el.className = `url-monitor-item status-${statusClass}`;
                el.innerHTML = `
                            <div class="url-info">
                                <strong>${monitor.name}</strong>
                                <div class="url-details">
                                    <span class="url">${monitor.url}</span>
                                    <span class="status status-${statusClass}">${monitor.status}</span>
                                    ${monitor.responseTime ? `<span class="response-time">${monitor.responseTime.toFixed(0)}ms</span>` : ''}
                                </div>
                            </div>
                            ${monitor.certificate ? `
                                <div class="cert-info cert-${certStatus}">
                                    <span class="cert-name">${monitor.certificate.commonName}</span>
                                    <span class="cert-expiry">Expires: ${new Date(monitor.certificate.expiryDate).toLocaleDateString()}</span>
                                    <span class="cert-days">${monitor.certificate.daysUntilExpiry} days left</span>
                                </div>
                            ` : '<div class="cert-info cert-none">No SSL Certificate</div>'}
                        `;
                container.appendChild(el);
            });
        } catch (error) {
            console.error('Error loading URL monitors:', error);
            document.getElementById('urlMonitorContainer').innerHTML =
                '<p style="text-align: center; color: var(--text-muted);">Error loading URL monitors</p>';
        }
    }

    async function scanNetwork() {
        try {
            const res = await fetch('/api/Discovery/scan-local', { method: 'POST' });
            const data = await res.json();
            const list = document.getElementById('discoveredDevicesList');
            list.innerHTML = '';

            if (!data.length) {
                list.innerHTML = '<p style="text-align:center;color:var(--text-muted);">No devices found</p>';
            } else {
                data.forEach((device, i) => {
                    const item = document.createElement('div');
                    item.className = 'discovered-device';
                    item.innerHTML = `<input type='checkbox' id='device-${i}' data-device='${JSON.stringify(device)}'> <label for='device-${i}'>${device.hostname || device.ipAddress}</label>`;
                    list.appendChild(item);
                });
            }

            document.getElementById('discoveryLoading').style.display = 'none';
            document.getElementById('discoveryResults').style.display = 'block';
        } catch (err) {
            console.error('Discovery error:', err);
            document.getElementById('discoveryLoading').innerHTML = '<p style="color:var(--danger-color);">Error scanning network</p>';
        }
    }

    async function addSelectedDevices() {
        const checkboxes = document.querySelectorAll('#discoveredDevicesList input[type="checkbox"]:checked');
        const selected = Array.from(checkboxes).map(cb => JSON.parse(cb.dataset.device));

        try {
            const res = await fetch('/api/Discovery/add-devices', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(selected)
            });

            if (res.ok) {
                alert('Devices added successfully');
                closeDiscoveryModal();
                loadRecentDevices();
                loadMetrics();
            } else {
                throw new Error('Failed to add devices');
            }
        } catch (error) {
            console.error('Add devices error:', error);
            alert('Error adding devices');
        }
    }

    async function addDevice() {
        const form = document.getElementById('addDeviceForm');
        const data = Object.fromEntries(new FormData(form));
        data.monitoringEnabled = form.monitoringEnabled.checked;

        try {
            const res = await fetch('/api/Devices', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (res.ok) {
                alert('Device added');
                closeAddDeviceModal();
                loadRecentDevices();
                loadMetrics();
            } else {
                throw new Error('Failed to add device');
            }
        } catch (error) {
            console.error('Add device error:', error);
            alert('Error adding device');
        }
    }

    async function addUrlMonitor() {
        const form = document.getElementById('urlMonitorForm');
        const data = Object.fromEntries(new FormData(form));

        try {
            const res = await fetch('/api/UrlMonitor', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (res.ok) {
                alert('Monitor added');
                closeUrlMonitorModal();
                loadUrlMonitors();
                loadMetrics();
            } else {
                throw new Error('Failed to add monitor');
            }
        } catch (error) {
            console.error('Add monitor error:', error);
            alert('Error adding monitor');
        }
    }

    async function checkAllUrls() {
        try {
            await fetch('/api/UrlMonitor/check-all', { method: 'POST' });
            await loadUrlMonitors();
            await loadMetrics();
        } catch (error) {
            console.error('Check all URLs error:', error);
            alert('Error checking URLs');
        }
    }

    function initializeCharts() {
        const ctxStatus = document.getElementById('statusChart').getContext('2d');
        const ctxResponse = document.getElementById('responseChart').getContext('2d');

        new Chart(ctxStatus, {
            type: 'line',
            data: {
                labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
                datasets: [{
                    label: 'Online Devices',
                    data: [12, 19, 3, 5, 2, 3, 7],
                    borderColor: getComputedStyle(document.documentElement).getPropertyValue('--primary-color').trim(),
                    fill: false
                }]
            },
            options: { responsive: true, maintainAspectRatio: false }
        });

        new Chart(ctxResponse, {
            type: 'bar',
            data: {
                labels: ["Example.com", "API.site", "Service.local"],
                datasets: [{
                    label: 'Response Time (ms)',
                    data: [250, 180, 300],
                    backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--accent-color').trim()
                }]
            },
            options: { responsive: true, maintainAspectRatio: false }
        });
    }
</script>
</html>
